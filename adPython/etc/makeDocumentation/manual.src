/**
\mainpage adPython EPICS Support Module
\section intro_sec Introduction
adPython is an <a href="http://cars9.uchicago.edu/software/epics/areaDetector.html">areaDetector</a> plugin which allows user python code to be run on each NDArray object the plugin receives, optionally creating a new NDArray object to pass out.

\section inst_sec Installation
- Modify configure/RELEASE
- If you have python and numpy in a standard place then comment out PYTHON_PREFIX, otherwise download and
   install python and numpy and set that macro to the install prefix you used.
- Python must be built shared
- Set AREADETECTOR to the path of areaDetector 1-9
- Type make
- Try the example in the \ref user_sec

\section bugs_sec Known Bugs
These are a wish list for better performance rather than bugs...
- Parameter list is converted to a python dictionary and back again for each new NDArray. This would be much better (and not too difficult to do) as python bindings to the parameter library
- Numpy array passed back from python for conversion to NDArray is in the right format, but has to be memcpy'd as NDArray release() can't call a user function

\section build_sec Build Instructions 
- \subpage build_instructions_example
IOCs build using these build instructions are available in iocs/

\section user_sec User Manual
This section will set out how to write adPython plugins. It assumes you have setup the example
IOC as setup in \subpage build_instructions_example, with a plugin that loads adPythonTemplate.py,
the corresponding database template and EDM screen.

\subsection template_edm Edm Screen

When you load the edm screen for the adPythonTemplate instance you will have a screen that looks like this:
\image html template_edm.png "adPythonTemplate EDM screen"

The top section is common to all adPython plugins, and shows the filename of the user python code to load, the classname to import from that file, and a button for reading it. It also shows how long the last array took to pass through the user python code, and if there was an error in any user python code.

The bottom section is specific to this specific adPython plugin script. It displays an interface to all parameters defined by this plugin.

\subsection template_python Template for writing adPython scripts

We will walk through the text from adPythonTemplate.py

\dontinclude adPythonTemplate.py
\skipline AdPythonPlugin
\until from numpy

First we import the libraries we will need. AdPythonPlugin is the base class we will inherit from, logging is used so we can turn debug logging on and off. The last section shows two different add functions, one from the <a href="http://opencv.org/">OpenCV</a> image processing library which does saturation arithmetic, and a second which is from the numpy library. Numpy must be present in order to compile adPython, but OpenCV is optional

\skipline Template

Here we subclass the AdPythonPlugin base class. This will provide us our logger, as well as the hooks that the C code uses to handle errors.

\skipline __init__
\until AdPythonPlugin

In the initialiser we are responsible for initialising our parameter library. The C code will create a parameter with name, type and value of every entry in the param dict passes to the baseclass initialiser, so it is important to make sure all parameters you will use in your python code are declared in this dictionary and have the right type (watch out for floats vs integers).

You may have noticed that on the EDM screen some of the parameters were hidden, this is so you
can create some python code based on adPythonTemplate.py without having to create a new database and screen each time. If you change \c int1Name then its name label will change on the screen, if you set it to \c -1 then it will disappear.

Once the parameter library has been created you can set and get existing parameters by using the dictionary access notation, e.g. \c self["int1"] = 5.

\skipline paramChanged
\until log.debug

The function is called whenever the parameter dictionary is changed from EPICS. It allows the class to validate its set of parameters and change any stored state associated with these parameters

\skipline processArray
\until return out

This function is called whenever a new NDArray is passed to the plugin. The numpy array \c arr is a read only array that points to the block of memory owned by the NDArray. The user code can optionally create and return a numpy array as an output that will be copied into a new NDArray. The dictionary \c attr is an attribute dictionary that will be attached to the new NDArray if it is created.

\skipline name
\until logspace

adPython has a test offline mode where a script can be called from the commandline and passed a number of images to cycle through. Running the script with a \c -h argument gives the following:

\verbatim
Usage: adPythonTemplate.py [files...]
        
This program will test the adPythonPlugin with a set of offline files. 
For each f in files:
- if f is a directory then add any png, jpg or tiff files within it to images
- otherwise add f to images
Display a gui that lets the user interactively change parameters on each image
- hit n for next image
- hit p for previous image
- hit q to quit

Options:
  -h, --help  show this help message and exit
  -r, --rgb   Allow rgb images to be passed straight through without
              converting them to greyscale
\endverbatim

The keywords passed to the runOffline() function will setup sliders for the integer and float parameters, and show a gui where the user can modify the sliders and use the n and p keys to skip between the images. Each keyword argument can be:
- the maximum range (non-inclusive)
- (minimum, maximum) with step of 1 (non-inclusive)
- (minimum, maximum, step) (non-inclusive)
- a numpy array of points with any spacing

The sliders will be set so that the index of the range can be set. It should be noted that the displayed value will be the INDEX of the array, not the parameter value.

\subsection offline_test Offline testing

Lets try a test of the adPythonTemplate.py script. First we need to put the adPythonApp/src directory on the PYTHONPATH, then we can just pass the script as an argument for the python interpreter you compiled adPython against (called dls-python at Diamond).

\code
PYTHONPATH=adPythonApp/src dls-python ./adPythonApp/scripts/adPythonTemplate.py
\endcode

This will run up a window where we can change parameters.

\image html offline_test.png "adPythonTemplate offline test"

\subsection template_user Writing your own adPython script

Once you have understood the adPythonTemplate example you can copy it somewhere and try it out. If you keep the same keys in the parameter dictionary then it will work with the adPythonTemplate.template database and adPythonTemplate.edl screen. To try it out in the example, just change the Filename PV to the full path to your test script, and the Classname PV to the name of the class you want instantiated.

\subsection new_plugin Writing an adPython script with custom parameters

- Create a new python file in the adPythonApp/scripts directory caller adPython<name>
- Create a \<name\> class that subclasses AdPythonPlugin
- Implement the __init__, paramChanged and processArray functions
- Create a database for all parameters you have defined in the initialiser
- Create an EDM screen that embeds adPythonPlugin.edl with widgets for all records in the database
- (DLS only) Add an entry in the builder ArgInfo classname list

\section bench Benchmarks
a test with a 10Hz URL driver plugin on a 696x816 mono image produced the following CPU loads doing a 7x7 kernel median blur using the openCV library
- Python: 41.2%
- Native C: 41.2%

Each plugin was taking about 26ms to process each image. This rough tests shows that for image processing speeds, the time taken to do the C processing far outweights the time taken to do the python conversions.

\section GIL The global interpreter lock
It should be noted that multiple python plugins within the same IOC will share the same global interpreter lock. This is a feature of C python. Python wrappers to computationally expensive functions like those in numpy and OpenCV generally release the GIL before doing the operation, so this is unlikely to be an issue if you have a few plugins, but does mean that adPython will not scale infinitely. 

**/

