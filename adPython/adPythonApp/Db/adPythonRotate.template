# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, ANGLEPV, Optional link to PV specifying angle
# % macro, ANGLESCALE, Optional ANGLEPV scaling
# % macro, ANGLEOFFSET, Optional ANGLEPV offset
 
# % gui, $(PORT), edmtab, adPythonRotate.edl, P=$(P),R=$(R)

record(mbbi, "$(P)$(R)Clipping_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))clip")
    field(SCAN, "I/O Intr")
    field(ZRST, "As Src")
    field(ZRVL, "0")
    field(ONST, "Square")
    field(ONVL, "1")
    field(TWST, "None")
    field(TWVL, "2")
}

record(mbbo, "$(P)$(R)Clipping")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))clip")
    field(ZRST, "As Src")
    field(ZRVL, "0")
    field(ONST, "Square")
    field(ONVL, "1")
    field(TWST, "None")
    field(TWVL, "2")
    info(autosaveFields, "VAL")
}

record(ai, "$(P)$(R)Angle_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))rotAngle")
    field(SCAN, "I/O Intr")
    field(PREC, "3")
    field(EGU,  "deg")     
}

record(ao, "$(P)$(R)Angle") {
    field(DESC, "Image rotation angle")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))rotAngle")
    field(PREC, "3")
    field(EGU, "deg")    
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(calcout, "$(P)$(R)AngleLinkCalc")
{
    field(DESC, "Apply scaling to anglelink")
    field(CALC, "A*B+C")
    field(INPB, "$(P)$(R)AngleLinkScale.VAL")
    field(INPC, "$(P)$(R)AngleLinkOffset.VAL")
    field(OOPT, "Every Time")
    field(DOPT, "Use CALC")
    field(OUT, "$(P)$(R)Angle PP")
}

record(ao, "$(P)$(R)AngleLink")
{
    field(DOL,  "$(ANGLEPV=) CP MS")
    field(OMSL, "closed_loop")
    field(OUT, "$(P)$(R)AngleLinkCalc.A PP MS")
    info(autosaveFields, "DOL")
}

record(ao, "$(P)$(R)AngleLinkScale")
{
    field(DOL,  "$(ANGLESCALE=1"))
    field(OMSL, "supervisory")
    field(PREC, "3")
    info(autosaveFields, "VAL")
}

record(ao, "$(P)$(R)AngleLinkOffset")
{
    field(DOL,  "$(ANGLEOFFSET=0"))
    field(OMSL, "supervisory")
    field(PREC, "3")
    info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)CentreX_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))rotCentreX")
    field(SCAN, "I/O Intr")
    field(EGU,  "pixels")     
}

record(longout, "$(P)$(R)CentreX") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))rotCentreX")
    field(EGU,  "pixels")     
    info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)CentreY_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))rotCentreY")
    field(SCAN, "I/O Intr")
    field(EGU,  "pixels")     
}

record(longout, "$(P)$(R)CentreY") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))rotCentreY")
    field(EGU,  "pixels")     
    info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)Blue_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))fillBlue")
    field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)Blue") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))fillBlue")
    field(DRVL, "0")
    field(DRVH, "255")
    info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)Green_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))fillGreen")
    field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)Green") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))fillGreen")
    field(DRVL, "0")
    field(DRVH, "255")
    info(autosaveFields, "VAL")
}

record(longin, "$(P)$(R)Red_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))fillRed")
    field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)Red") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))fillRed")
    field(DRVL, "0")
    field(DRVH, "255")
    info(autosaveFields, "VAL")
}


