# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % gui, $(PORT), edmtab, adPythonMxSampleDetect.edl, P=$(P),R=$(R)


# Records relating to preprocessing.

record(mbbo, "$(P)$(R)Preprocess") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))preprocess")

    field(ZRST, "Erode")
    field(ZRVL, "0")
    field(ONST, "Dilate")
    field(ONVL, "1")
    field(TWST, "Open")
    field(TWVL, "2")
    field(THST, "Close")
    field(THVL, "3")
    field(FRST, "Gradient")
    field(FRVL, "4")
    field(FVST, "Top hat")
    field(FVVL, "5")
    field(SXST, "Black hat")
    field(SXVL, "6")
    field(SVST, "Blur")
    field(SVVL, "7")
    field(EIST, "Gaussian blur")
    field(EIVL, "8")
    field(NIST, "Median blur")
    field(NIVL, "9")
    field(TEST, "None")
    field(TEVL, "10")
}
record(mbbi, "$(P)$(R)Preprocess_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))preprocess")

    field(ZRST, "Erode")
    field(ZRVL, "0")
    field(ONST, "Dilate")
    field(ONVL, "1")
    field(TWST, "Open")
    field(TWVL, "2")
    field(THST, "Close")
    field(THVL, "3")
    field(FRST, "Gradient")
    field(FRVL, "4")
    field(FVST, "Top hat")
    field(FVVL, "5")
    field(SXST, "Black hat")
    field(SXVL, "6")
    field(SVST, "Blur")
    field(SVVL, "7")
    field(EIST, "Gaussian blur")
    field(EIVL, "8")
    field(NIST, "Median blur")
    field(NIVL, "9")
    field(TEST, "None")
    field(TEVL, "10")
}

# Abuse a couple of mbbis to provide descriptions of preprocess parameters.
record(mbbi, "$(P)$(R)PpParam1Name") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))preprocess")

    field(ZRST, "ksize (px)")
    field(ZRVL, "0")
    field(ONST, "ksize (px)")
    field(ONVL, "1")
    field(TWST, "ksize (px)")
    field(TWVL, "2")
    field(THST, "ksize (px)")
    field(THVL, "3")
    field(FRST, "ksize (px)")
    field(FRVL, "4")
    field(FVST, "ksize (px)")
    field(FVVL, "5")
    field(SXST, "ksize (px)")
    field(SXVL, "6")
    field(SVST, "ksize (px)")
    field(SVVL, "7")
    field(EIST, "ksize (px)")
    field(EIVL, "8")
    field(NIST, "ksize (px)")
    field(NIVL, "9")
    field(TEST, "(Unused)")
    field(TEVL, "10")
}
record(mbbi, "$(P)$(R)PpParam2Name") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))preprocess")

    field(ZRST, "Iterations")
    field(ZRVL, "0")
    field(ONST, "Iterations")
    field(ONVL, "1")
    field(TWST, "Iterations")
    field(TWVL, "2")
    field(THST, "Iterations")
    field(THVL, "3")
    field(FRST, "Iterations")
    field(FRVL, "4")
    field(FVST, "Iterations")
    field(FVVL, "5")
    field(SXST, "Iterations")
    field(SXVL, "6")
    field(SVST, "(Unused)")
    field(SVVL, "7")
    field(EIST, "(Unused)")
    field(EIVL, "8")
    field(NIST, "(Unused)")
    field(NIVL, "9")
    field(TEST, "(Unused)")
    field(TEVL, "10")
}

record(longout, "$(P)$(R)PpParam1") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))pp_param1")
}
record(longin, "$(P)$(R)PpParam1_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))pp_param1")
}

record(longout, "$(P)$(R)PpParam2") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))pp_param2")
}
record(longin, "$(P)$(R)PpParam2_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))pp_param2")
}


# Records relating to edge detection.

record(longout, "$(P)$(R)CannyUpper") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))canny_upper")
}
record(longin, "$(P)$(R)CannyUpper_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))canny_upper")
}

record(longout, "$(P)$(R)CannyLower") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))canny_lower")
}
record(longin, "$(P)$(R)CannyLower_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))canny_lower")
}


# Records relating to "close" morphological operation.

record(longout, "$(P)$(R)CloseKsize") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))close_ksize")
}
record(longin, "$(P)$(R)CloseKsize_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))close_ksize")
}

record(longout, "$(P)$(R)CloseIterations") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))close_iterations")
}
record(longin, "$(P)$(R)CloseIterations_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))close_iterations")
}


# Records relating to sample detection.

record(mbbo, "$(P)$(R)ScanDirection") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))scan_direction")

    field(ZRST, "Left to right")
    field(ZRVL, "1")
    field(ONST, "Right to left")
    field(ONVL, "-1")
}
record(mbbi, "$(P)$(R)ScanDirection_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))scan_direction")

    field(ZRST, "Left to right")
    field(ZRVL, "1")
    field(ONST, "Right to left")
    field(ONVL, "-1")
}

record(longout, "$(P)$(R)MinTipHeight") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))min_tip_height")
}
record(longin, "$(P)$(R)MinTipHeight_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))min_tip_height")
}


# Records relating to output.

record(longin, "$(P)$(R)TipX") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))tip_x")
}
record(longin, "$(P)$(R)TipY") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))tip_y")
}


record(waveform, "$(P)$(R)Top")
{
   field(SCAN, "I/O Intr")
   field(DTYP, "asynInt32ArrayIn")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))top")
   field(FTVL, "LONG")
   field(NELM, "1024")
}
record(waveform, "$(P)$(R)Bottom")
{
   field(SCAN, "I/O Intr")
   field(DTYP, "asynInt32ArrayIn")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))bottom")
   field(FTVL, "LONG")
   field(NELM, "1024")
}

record(mbbo, "$(P)$(R)OutputArray") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))out_arr")

    field(ZRST, "Original")
    field(ZRVL, "0")
    field(ONST, "Greyscale")
    field(ONVL, "1")
    field(TWST, "Preprocessed")
    field(TWVL, "2")
    field(THST, "Canny edges")
    field(THVL, "3")
    field(FRST, "Closed edges")
    field(FRVL, "4")
}
record(mbbi, "$(P)$(R)OutputArray_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))out_arr")

    field(ZRST, "Original")
    field(ZRVL, "0")
    field(ONST, "Greyscale")
    field(ONVL, "1")
    field(TWST, "Preprocessed")
    field(TWVL, "2")
    field(THST, "Canny edges")
    field(THVL, "3")
    field(FRST, "Closed edges")
    field(FRVL, "4")
}

record(bo, "$(P)$(R)DrawTip") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))draw_circle")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
}
record(bi, "$(P)$(R)DrawTip_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))draw_circle")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
}

record(bo, "$(P)$(R)DrawEdges") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))draw_edges")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
}
record(bi, "$(P)$(R)DrawEdges_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))draw_edges")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
}

record(bo, "$(P)$(R)ForceColor") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))force_color")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}
record(bi, "$(P)$(R)ForceColor_RBV") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))force_color")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}
