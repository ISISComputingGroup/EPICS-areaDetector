diff --git a/supportApp/nexusSrc/os/default/napi.h b/supportApp/nexusSrc/os/default/napi.h
index 393eb8d..f57476c 100755
--- a/supportApp/nexusSrc/os/default/napi.h
+++ b/supportApp/nexusSrc/os/default/napi.h
@@ -190,6 +190,16 @@ typedef struct {
 #        define MANGLE(__arg)   CONCAT(__arg,_)
 #    endif
 
+#if defined(DLL_NEXUS) /* define when library is a DLL */
+#  if defined(DLL_EXPORT) /* define when building the library */
+#    define EXTERN             extern __declspec(dllexport)
+#  else
+#    define EXTERN             extern __declspec(dllimport)
+#  endif
+#else
+#  define EXTERN extern
+#endif
+
 #    define NXopen              MANGLE(nxiopen)
 #    define NXreopen            MANGLE(nxireopen)
 #    define NXclose             MANGLE(nxiclose)
@@ -288,14 +298,14 @@ extern "C" {
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_init
    */
-extern  NXstatus  NXopen(CONSTCHAR * filename, NXaccess access_method, NXhandle* pHandle);
+EXTERN  NXstatus  NXopen(CONSTCHAR * filename, NXaccess access_method, NXhandle* pHandle);
 
   /** 
    * Opens an existing NeXus file a second time for e.g. access from another thread.
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_init
    */
-extern  NXstatus  NXreopen(NXhandle pOrigHandle, NXhandle* pNewHandle);
+EXTERN  NXstatus  NXreopen(NXhandle pOrigHandle, NXhandle* pNewHandle);
 
   /**
    * close a NeXus file
@@ -304,7 +314,7 @@ extern  NXstatus  NXreopen(NXhandle pOrigHandle, NXhandle* pNewHandle);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_init
    */
-extern  NXstatus  NXclose(NXhandle* pHandle);
+EXTERN  NXstatus  NXclose(NXhandle* pHandle);
 
   /**
    * flush data to disk
@@ -312,7 +322,7 @@ extern  NXstatus  NXclose(NXhandle* pHandle);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_readwrite
    */
-extern  NXstatus  NXflush(NXhandle* pHandle);
+EXTERN  NXstatus  NXflush(NXhandle* pHandle);
 
   /**
    * NeXus groups are NeXus way of structuring information into a hierarchy. 
@@ -323,7 +333,7 @@ extern  NXstatus  NXflush(NXhandle* pHandle);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_group
    */
-extern  NXstatus  NXmakegroup (NXhandle handle, CONSTCHAR *name, CONSTCHAR* NXclass);
+EXTERN  NXstatus  NXmakegroup (NXhandle handle, CONSTCHAR *name, CONSTCHAR* NXclass);
 
   /**
    * Step into a group. All further access will be within the opened group.
@@ -333,7 +343,7 @@ extern  NXstatus  NXmakegroup (NXhandle handle, CONSTCHAR *name, CONSTCHAR* NXcl
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_group
    */
-extern  NXstatus  NXopengroup (NXhandle handle, CONSTCHAR *name, CONSTCHAR* NXclass);
+EXTERN  NXstatus  NXopengroup (NXhandle handle, CONSTCHAR *name, CONSTCHAR* NXclass);
 
   /**
    * Open the NeXus object with the path specified
@@ -344,7 +354,7 @@ extern  NXstatus  NXopengroup (NXhandle handle, CONSTCHAR *name, CONSTCHAR* NXcl
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_navigation 
    */
-extern  NXstatus  NXopenpath (NXhandle handle, CONSTCHAR *path);
+EXTERN  NXstatus  NXopenpath (NXhandle handle, CONSTCHAR *path);
 
   /**
    * Opens the group in which the NeXus object with the specified path exists
@@ -355,7 +365,7 @@ extern  NXstatus  NXopenpath (NXhandle handle, CONSTCHAR *path);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_navigation 
    */
-extern  NXstatus  NXopengrouppath (NXhandle handle, CONSTCHAR *path);
+EXTERN  NXstatus  NXopengrouppath (NXhandle handle, CONSTCHAR *path);
 
   /**
    * Retrieve the current path in the NeXus file
@@ -365,7 +375,7 @@ extern  NXstatus  NXopengrouppath (NXhandle handle, CONSTCHAR *path);
    * \return NX_OK or NX_ERROR
    * \ingroup c_navigation
    */
-extern NXstatus NXgetpath(NXhandle handle, char *path, int pathlen);
+EXTERN NXstatus NXgetpath(NXhandle handle, char *path, int pathlen);
 
   /**
    * Closes the currently open group and steps one step down in the NeXus file 
@@ -373,7 +383,7 @@ extern NXstatus NXgetpath(NXhandle handle, char *path, int pathlen);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_group 
    */
-extern  NXstatus  NXclosegroup(NXhandle handle);
+EXTERN  NXstatus  NXclosegroup(NXhandle handle);
 
   /**
    * Create a multi dimensional data array or dataset. The dataset is NOT opened. 
@@ -386,13 +396,13 @@ extern  NXstatus  NXclosegroup(NXhandle handle);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_readwrite
    */
-extern  NXstatus  NXmakedata (NXhandle handle, CONSTCHAR* label, int datatype, int rank, int dim[]);
+EXTERN  NXstatus  NXmakedata (NXhandle handle, CONSTCHAR* label, int datatype, int rank, int dim[]);
 
 
   /**
    * @copydoc NXmakedata()
    */
-extern  NXstatus  NXmakedata64 (NXhandle handle, CONSTCHAR* label, int datatype, int rank, int64_t dim[]);
+EXTERN  NXstatus  NXmakedata64 (NXhandle handle, CONSTCHAR* label, int datatype, int rank, int64_t dim[]);
 
 
 /**
@@ -415,13 +425,13 @@ extern  NXstatus  NXmakedata64 (NXhandle handle, CONSTCHAR* label, int datatype,
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_readwrite
    */
-extern  NXstatus  NXcompmakedata (NXhandle handle, CONSTCHAR* label, int datatype, int rank, int dim[], int comp_typ, int bufsize[]);
+EXTERN  NXstatus  NXcompmakedata (NXhandle handle, CONSTCHAR* label, int datatype, int rank, int dim[], int comp_typ, int bufsize[]);
 
 
 /**
   * @copydoc NXcompmakedata() 
   */
-extern  NXstatus NXcompmakedata64 (NXhandle handle, CONSTCHAR* label, int datatype, int rank, int64_t dim[], int comp_typ, int64_t chunk_size[]);
+EXTERN  NXstatus NXcompmakedata64 (NXhandle handle, CONSTCHAR* label, int datatype, int rank, int64_t dim[], int comp_typ, int64_t chunk_size[]);
 
 
   /**
@@ -435,7 +445,7 @@ extern  NXstatus NXcompmakedata64 (NXhandle handle, CONSTCHAR* label, int dataty
    * \li NX_COMP_HUF Huffmann encoding (only HDF-4)
    * \ingroup c_readwrite
    */
-extern  NXstatus  NXcompress (NXhandle handle, int compr_type) NEXUS_DEPRECATED_FUNCTION;
+EXTERN  NXstatus  NXcompress (NXhandle handle, int compr_type) NEXUS_DEPRECATED_FUNCTION;
 
   /**
    * Open access to a dataset. After this call it is possible to write and read data or 
@@ -445,7 +455,7 @@ extern  NXstatus  NXcompress (NXhandle handle, int compr_type) NEXUS_DEPRECATED_
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_readwrite 
    */
-extern  NXstatus  NXopendata (NXhandle handle, CONSTCHAR* label);
+EXTERN  NXstatus  NXopendata (NXhandle handle, CONSTCHAR* label);
 
   /**
    * Close access to a dataset. 
@@ -453,7 +463,7 @@ extern  NXstatus  NXopendata (NXhandle handle, CONSTCHAR* label);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_readwrite 
    */
-extern  NXstatus  NXclosedata(NXhandle handle);
+EXTERN  NXstatus  NXclosedata(NXhandle handle);
 
   /**
    * Write data to a datset which has previouly been opened with NXopendata. 
@@ -464,7 +474,7 @@ extern  NXstatus  NXclosedata(NXhandle handle);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_readwrite
    */
-extern  NXstatus  NXputdata(NXhandle handle, const void* data);
+EXTERN  NXstatus  NXputdata(NXhandle handle, const void* data);
 
   /**
    * Write an attribute. The kind of attribute written depends on the  
@@ -481,7 +491,7 @@ extern  NXstatus  NXputdata(NXhandle handle, const void* data);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_readwrite
    */
-extern  NXstatus  NXputattr(NXhandle handle, CONSTCHAR* name, const void* data, int iDataLen, int iType);
+EXTERN  NXstatus  NXputattr(NXhandle handle, CONSTCHAR* name, const void* data, int iDataLen, int iType);
 
   /**
    * Write an attribute of any rank. The kind of attribute written depends on the  
@@ -497,7 +507,7 @@ extern  NXstatus  NXputattr(NXhandle handle, CONSTCHAR* name, const void* data,
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_readwrite
    */
-extern  NXstatus  NXputattra(NXhandle handle, CONSTCHAR* name, const void* data, const int rank, const int dim[], const int iType);
+EXTERN  NXstatus  NXputattra(NXhandle handle, CONSTCHAR* name, const void* data, const int rank, const int dim[], const int iType);
 
   /**
    * Write  a subset of a multi dimensional dataset.
@@ -508,12 +518,12 @@ extern  NXstatus  NXputattra(NXhandle handle, CONSTCHAR* name, const void* data,
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_readwrite
    */
-extern  NXstatus  NXputslab(NXhandle handle, const void* data, const int start[], const int size[]);    
+EXTERN  NXstatus  NXputslab(NXhandle handle, const void* data, const int start[], const int size[]);    
 
   /**
    * @copydoc NXputdata()
    */
-extern  NXstatus  NXputslab64(NXhandle handle, const void* data, const int64_t start[], const int64_t size[]);    
+EXTERN  NXstatus  NXputslab64(NXhandle handle, const void* data, const int64_t start[], const int64_t size[]);    
 
   /**
    * Retrieve link data for a dataset. This link data can later on be used to link this 
@@ -524,7 +534,7 @@ extern  NXstatus  NXputslab64(NXhandle handle, const void* data, const int64_t s
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_linking
    */
-extern  NXstatus  NXgetdataID(NXhandle handle, NXlink* pLink);
+EXTERN  NXstatus  NXgetdataID(NXhandle handle, NXlink* pLink);
 
   /**
    * Create a link to the group or dataset described by pLink in the currently open 
@@ -535,7 +545,7 @@ extern  NXstatus  NXgetdataID(NXhandle handle, NXlink* pLink);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_linking
    */
-extern  NXstatus  NXmakelink(NXhandle handle, NXlink* pLink);
+EXTERN  NXstatus  NXmakelink(NXhandle handle, NXlink* pLink);
 
   /**
    * Create a link to the group or dataset described by pLink in the currently open 
@@ -547,7 +557,7 @@ extern  NXstatus  NXmakelink(NXhandle handle, NXlink* pLink);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_linking
    */
-extern  NXstatus  NXmakenamedlink(NXhandle handle, CONSTCHAR* newname, NXlink* pLink);
+EXTERN  NXstatus  NXmakenamedlink(NXhandle handle, CONSTCHAR* newname, NXlink* pLink);
 
   /**
    * Open the source group of a linked group or dataset. Returns an error when the item is 
@@ -556,7 +566,7 @@ extern  NXstatus  NXmakenamedlink(NXhandle handle, CONSTCHAR* newname, NXlink* p
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_navigation
    */
-extern  NXstatus  NXopensourcegroup(NXhandle handle);
+EXTERN  NXstatus  NXopensourcegroup(NXhandle handle);
 
   /**
    * Read a complete dataset from the currently open dataset into memory. 
@@ -567,7 +577,7 @@ extern  NXstatus  NXopensourcegroup(NXhandle handle);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_readwrite
    */
-extern  NXstatus  NXgetdata(NXhandle handle, void* data);
+EXTERN  NXstatus  NXgetdata(NXhandle handle, void* data);
 
   /**
    * Retrieve information about the curretly open dataset.
@@ -580,12 +590,12 @@ extern  NXstatus  NXgetdata(NXhandle handle, void* data);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_metadata
    */
-extern  NXstatus  NXgetinfo(NXhandle handle, int* rank, int dimension[], int* datatype);
+EXTERN  NXstatus  NXgetinfo(NXhandle handle, int* rank, int dimension[], int* datatype);
 
   /**
    * @copydoc NXgetinfo()
    */
-extern  NXstatus  NXgetinfo64(NXhandle handle, int* rank, int64_t dimension[], int* datatype);
+EXTERN  NXstatus  NXgetinfo64(NXhandle handle, int* rank, int64_t dimension[], int* datatype);
 
   /**
    * Get the next entry in the currently open group. This is for retrieving infromation about the 
@@ -599,7 +609,7 @@ extern  NXstatus  NXgetinfo64(NXhandle handle, int* rank, int64_t dimension[], i
    * \return NX_OK on success, NX_ERROR in the case of an error, NX_EOD when there are no more items.   
    * \ingroup c_navigation
    */
-extern  NXstatus  NXgetnextentry(NXhandle handle, NXname name, NXname nxclass, int* datatype);
+EXTERN  NXstatus  NXgetnextentry(NXhandle handle, NXname name, NXname nxclass, int* datatype);
 
   /**
    * Read a subset of data from file into memory. 
@@ -611,13 +621,13 @@ extern  NXstatus  NXgetnextentry(NXhandle handle, NXname name, NXname nxclass, i
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_readwrite
    */
-extern  NXstatus  NXgetslab(NXhandle handle, void* data, const int start[], const int size[]);
+EXTERN  NXstatus  NXgetslab(NXhandle handle, void* data, const int start[], const int size[]);
 
 
   /**
    * @copydoc NXgetslab()
    */
-extern  NXstatus  NXgetslab64(NXhandle handle, void* data, const int64_t start[], const int64_t size[]);
+EXTERN  NXstatus  NXgetslab64(NXhandle handle, void* data, const int64_t start[], const int64_t size[]);
 
 /**
    * Iterate over global, group or dataset attributes depending on the currently open group or 
@@ -632,7 +642,7 @@ extern  NXstatus  NXgetslab64(NXhandle handle, void* data, const int64_t start[]
    * \return NX_OK on success, NX_ERROR in the case of an error, NX_EOD when there are no more items.   
    * \ingroup c_readwrite
    */
-extern  NXstatus  NXgetnextattr(NXhandle handle, NXname pName, int *iLength, int *iType) NEXUS_DEPRECATED_FUNCTION;
+EXTERN  NXstatus  NXgetnextattr(NXhandle handle, NXname pName, int *iLength, int *iType) NEXUS_DEPRECATED_FUNCTION;
 
   /**
    * Read an attribute containing a single string or numerical value.
@@ -645,7 +655,7 @@ extern  NXstatus  NXgetnextattr(NXhandle handle, NXname pName, int *iLength, int
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_readwrite
    */
-extern  NXstatus  NXgetattr(NXhandle handle, const char* name, void* data, int* iDataLen, int* iType);
+EXTERN  NXstatus  NXgetattr(NXhandle handle, const char* name, void* data, int* iDataLen, int* iType);
 
   /**
    * Get the count of attributes in the currently open dataset, group or global attributes when at root level.
@@ -654,7 +664,7 @@ extern  NXstatus  NXgetattr(NXhandle handle, const char* name, void* data, int*
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_metadata
    */
-extern  NXstatus  NXgetattrinfo(NXhandle handle, int* no_items);
+EXTERN  NXstatus  NXgetattrinfo(NXhandle handle, int* no_items);
 
 /**
    * Iterate over global, group or dataset attributes depending on the currently open group or 
@@ -670,7 +680,7 @@ extern  NXstatus  NXgetattrinfo(NXhandle handle, int* no_items);
    * \return NX_OK on success, NX_ERROR in the case of an error, NX_EOD when there are no more items.   
    * \ingroup c_readwrite
    */
-extern  NXstatus  NXgetnextattra(NXhandle handle, NXname pName, int *rank, int dim[], int *iType);
+EXTERN  NXstatus  NXgetnextattra(NXhandle handle, NXname pName, int *rank, int dim[], int *iType);
 
   /**
    * Read an arbitrarily shaped attribute.
@@ -680,7 +690,7 @@ extern  NXstatus  NXgetnextattra(NXhandle handle, NXname pName, int *rank, int d
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_readwrite
    */
-extern  NXstatus  NXgetattra(NXhandle handle, const char* name, void* data);
+EXTERN  NXstatus  NXgetattra(NXhandle handle, const char* name, void* data);
 
   /**
    * Get the information about the storage of the named attribute.
@@ -691,7 +701,7 @@ extern  NXstatus  NXgetattra(NXhandle handle, const char* name, void* data);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_metadata
    */
-extern  NXstatus  NXgetattrainfo(NXhandle handle, NXname pName, int *rank, int dim[], int *iType);
+EXTERN  NXstatus  NXgetattrainfo(NXhandle handle, NXname pName, int *rank, int dim[], int *iType);
 
   /**
    * Retrieve link data for the currently open group. This link data can later on be used to link this 
@@ -702,7 +712,7 @@ extern  NXstatus  NXgetattrainfo(NXhandle handle, NXname pName, int *rank, int d
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_linking
    */
-extern  NXstatus  NXgetgroupID(NXhandle handle, NXlink* pLink);
+EXTERN  NXstatus  NXgetgroupID(NXhandle handle, NXlink* pLink);
 
   /**
    * Retrieve information about the currently open group.
@@ -715,7 +725,7 @@ extern  NXstatus  NXgetgroupID(NXhandle handle, NXlink* pLink);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_metadata
    */
-extern  NXstatus  NXgetgroupinfo(NXhandle handle, int* no_items, NXname name, NXname nxclass);
+EXTERN  NXstatus  NXgetgroupinfo(NXhandle handle, int* no_items, NXname name, NXname nxclass);
 
   /**
    * Tests if two link data structures describe the same item.
@@ -725,7 +735,7 @@ extern  NXstatus  NXgetgroupinfo(NXhandle handle, int* no_items, NXname name, NX
    * \return NX_OK when both link data structures describe the same item, NX_ERROR else.   
    * \ingroup c_linking
    */
-extern  NXstatus  NXsameID(NXhandle handle, NXlink* pFirstID, NXlink* pSecondID);
+EXTERN  NXstatus  NXsameID(NXhandle handle, NXlink* pFirstID, NXlink* pSecondID);
 
   /**
    * Resets a pending group search to the start again. To be called in a #NXgetnextentry loop when 
@@ -734,7 +744,7 @@ extern  NXstatus  NXsameID(NXhandle handle, NXlink* pFirstID, NXlink* pSecondID)
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_navigation 
    */
-extern  NXstatus  NXinitgroupdir(NXhandle handle);
+EXTERN  NXstatus  NXinitgroupdir(NXhandle handle);
 
   /**
    * Resets a pending attribute search to the start again. To be called in a #NXgetnextattr loop when 
@@ -743,7 +753,7 @@ extern  NXstatus  NXinitgroupdir(NXhandle handle);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_navigation
    */
-extern  NXstatus  NXinitattrdir(NXhandle handle);
+EXTERN  NXstatus  NXinitattrdir(NXhandle handle);
 
   /**
    * Sets the format for number printing. This call has only an effect when using the XML physical file 
@@ -754,7 +764,7 @@ extern  NXstatus  NXinitattrdir(NXhandle handle);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_readwrite
    */
-extern  NXstatus  NXsetnumberformat(NXhandle handle, int type, char *format);
+EXTERN  NXstatus  NXsetnumberformat(NXhandle handle, int type, char *format);
 
   /**
    * Inquire the filename of the currently open file. FilenameBufferLength of the file name 
@@ -765,7 +775,7 @@ extern  NXstatus  NXsetnumberformat(NXhandle handle, int type, char *format);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_metadata
    */
-extern  NXstatus  NXinquirefile(NXhandle handle, char *filename, int filenameBufferLength);
+EXTERN  NXstatus  NXinquirefile(NXhandle handle, char *filename, int filenameBufferLength);
 
   /**
    * Test if a group is actually pointing to an external file. If so, retrieve the URL of the 
@@ -778,7 +788,7 @@ extern  NXstatus  NXinquirefile(NXhandle handle, char *filename, int filenameBuf
    * \return NX_OK when the group is pointing to an external file, NX_ERROR else.
    * \ingroup c_external
    */
-extern  NXstatus  NXisexternalgroup(NXhandle handle, CONSTCHAR *name, CONSTCHAR *nxclass, char *url, int urlLen); 
+EXTERN  NXstatus  NXisexternalgroup(NXhandle handle, CONSTCHAR *name, CONSTCHAR *nxclass, char *url, int urlLen); 
 
 
   /**
@@ -791,7 +801,7 @@ extern  NXstatus  NXisexternalgroup(NXhandle handle, CONSTCHAR *name, CONSTCHAR
    * \return NX_OK when the dataset is pointing to an external file, NX_ERROR else.
    * \ingroup c_external
    */
-extern  NXstatus  NXisexternaldataset(NXhandle handle, CONSTCHAR *name, char *url, int urlLen); 
+EXTERN  NXstatus  NXisexternaldataset(NXhandle handle, CONSTCHAR *name, char *url, int urlLen); 
 
   /**
    * Create a link to a group in an external file. This works by creating a NeXus group under the current level in 
@@ -805,7 +815,7 @@ extern  NXstatus  NXisexternaldataset(NXhandle handle, CONSTCHAR *name, char *ur
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_external
    */
-extern  NXstatus  NXlinkexternal(NXhandle handle, CONSTCHAR *name, CONSTCHAR *nxclass, CONSTCHAR *url);
+EXTERN  NXstatus  NXlinkexternal(NXhandle handle, CONSTCHAR *name, CONSTCHAR *nxclass, CONSTCHAR *url);
 
 
   /**
@@ -819,7 +829,7 @@ extern  NXstatus  NXlinkexternal(NXhandle handle, CONSTCHAR *name, CONSTCHAR *nx
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_external
    */
-extern  NXstatus  NXlinkexternaldataset(NXhandle handle, CONSTCHAR *name, CONSTCHAR *url);
+EXTERN  NXstatus  NXlinkexternaldataset(NXhandle handle, CONSTCHAR *name, CONSTCHAR *url);
 
   /**
    * Utility function which allocates a suitably sized memory area for the dataset characteristics specified.
@@ -830,12 +840,12 @@ extern  NXstatus  NXlinkexternaldataset(NXhandle handle, CONSTCHAR *name, CONSTC
    * \return NX_OK when allocation succeeds, NX_ERROR in the case of an error.   
    * \ingroup c_memory
    */ 
-extern  NXstatus  NXmalloc(void** data, int rank, const int dimensions[], int datatype);
+EXTERN  NXstatus  NXmalloc(void** data, int rank, const int dimensions[], int datatype);
 
   /**
    * @copydoc NXmalloc()
    */ 
-extern  NXstatus  NXmalloc64(void** data, int rank, const int64_t dimensions[], int datatype);
+EXTERN  NXstatus  NXmalloc64(void** data, int rank, const int64_t dimensions[], int datatype);
 
 
   /**
@@ -844,7 +854,7 @@ extern  NXstatus  NXmalloc64(void** data, int rank, const int64_t dimensions[],
    * same format as NEXUS_VERSION string in napi.h i.e. "major.minor.patch"
    * \ingroup c_metadata
    */
-extern  const char* NXgetversion();
+EXTERN  const char* NXgetversion();
 
   /**
    * Utility function to release the memory for data.
@@ -852,10 +862,10 @@ extern  const char* NXgetversion();
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_memory
    */
-extern  NXstatus  NXfree(void** data);
+EXTERN  NXstatus  NXfree(void** data);
 
 
-extern  NXstatus  NXIprintlink(NXhandle fid, NXlink* link);
+EXTERN  NXstatus  NXIprintlink(NXhandle fid, NXlink* link);
   
 /**
    * Retrieve information about the currently open dataset. In contrast to the main function below, 
@@ -869,12 +879,12 @@ extern  NXstatus  NXIprintlink(NXhandle fid, NXlink* link);
    * \return NX_OK on success, NX_ERROR in the case of an error.   
    * \ingroup c_metadata
    */
-extern  NXstatus  NXgetrawinfo(NXhandle handle, int* rank, int dimension[], int* datatype);
+EXTERN  NXstatus  NXgetrawinfo(NXhandle handle, int* rank, int dimension[], int* datatype);
 
  /**
   * @copydoc NXgetrawinfo
   */
-extern  NXstatus  NXgetrawinfo64(NXhandle handle, int* rank, int64_t dimension[], int* datatype);
+EXTERN  NXstatus  NXgetrawinfo64(NXhandle handle, int* rank, int64_t dimension[], int* datatype);
 
 /** \typedef void (*ErrFunc)(void *data, char *text)
  * All NeXus error reporting happens through this special function, the 
@@ -893,7 +903,7 @@ typedef void (*ErrFunc)(void *data, char *text);
    * the error display function.
    * \param newErr The new error display function.
    */
-extern  void  NXMSetError(void *pData, ErrFunc newErr);
+EXTERN  void  NXMSetError(void *pData, ErrFunc newErr);
 
   /**
    * Set an error function for the current thread.
@@ -903,41 +913,41 @@ extern  void  NXMSetError(void *pData, ErrFunc newErr);
    * the error display function.
    * \param newErr The new error display function.
    */
-extern  void  NXMSetTError(void *pData, ErrFunc newErr);
+EXTERN  void  NXMSetTError(void *pData, ErrFunc newErr);
 
   /**
    * Retrieve the current error display function
    * \return The current error display function.
    */
-extern ErrFunc NXMGetError();
+EXTERN ErrFunc NXMGetError();
 
   /**
    * Suppress error reports from the NeXus-API
    */
-extern  void  NXMDisableErrorReporting();
+EXTERN  void  NXMDisableErrorReporting();
 
   /**
    * Enable error reports from the NeXus-API
    */
-extern  void  NXMEnableErrorReporting();
+EXTERN  void  NXMEnableErrorReporting();
 
  /**
   * Dispatches the error message to the error function defined by NXMSetTError
   */
-extern void NXReportError(char *text);
+EXTERN void NXReportError(char *text);
 
  /**
   * Do not use, first parameter should be set by NXMSetTError
   */
-extern void NXIReportError(void *pData,char *text);
+EXTERN void NXIReportError(void *pData,char *text);
 /* extern void *NXpData; */
-extern char *NXIformatNeXusTime();
+EXTERN char *NXIformatNeXusTime();
 
 /**
  * A function for setting the default cache size for HDF-5
  * \ingroup c_init
  */
-extern NXstatus  NXsetcache(long newVal);
+EXTERN NXstatus  NXsetcache(long newVal);
 
 #ifdef __cplusplus
 };
