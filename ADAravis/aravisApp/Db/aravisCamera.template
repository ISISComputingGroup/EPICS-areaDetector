# Database for the records specific to the ADAravis driver
# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout, default 1
#% macro, ADDR, Asyn Port address, default 0

include "ADGenICam.template"

record(ai, "$(P)$(R)ARFramesCompleted")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_COMPLETED")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC LLSV LOLO LOW LSV")
}

record(ai, "$(P)$(R)ARFrameFailures")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_FAILURES")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(ai, "$(P)$(R)ARFrameUnderruns")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_UNDERRUNS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(longin, "$(P)$(R)ARMissingPackets")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_MISSING_PKTS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(longin, "$(P)$(R)ARResentPackets")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_RESENT_PKTS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(mbbo, "$(P)$(R)ARPacketResendEnable")
{
   field(DESC, "Packet resend enable")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_PKT_RESEND")
   field(ZRST, "Never")
   field(ZRVL, "0")
   field(ONST, "Always")
   field(ONVL, "1")
   field(VAL,  "1")
   field(PINI, "1")
   info(autosaveFields, "DESC ONSV ZRSV PINI VAL")
}

record(longout, "$(P)$(R)ARPacketTimeout")
{
   field(DESC, "Delay in us before packet resend request")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_PKT_TIMEOUT")
   field(VAL,  "20000")
   field(EGU,  "us")
   field(PINI, "1")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV LLSV LOLO LOW LSV PINI VAL")
}

record(longout, "$(P)$(R)ARFrameRetention")
{
   field(DESC, "Frame timeout in us after last packet")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_FRAME_RETENTION")
   field(VAL,  "100000")
   field(EGU,  "us")
   field(PINI, "1")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV LLSV LOLO LOW LSV PINI VAL")
}

record(longout, "$(P)$(R)ARResetCamera")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_RESET")
   field(FLNK, "$(P)$(R)ARConnectCamera")
}

record(longout, "$(P)$(R)ARConnectCamera")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_CONNECTION")
   field(VAL, "1")
   field(PINI, "1")
}

record(calcout, "$(P)$(R)ARCheckConnection")
{
   field(SCAN, "1 second")
   field(INPA, "$(P)$(R)ARConnectCamera.SEVR CP")
   field(CALC, "A==0")
   field(OOPT, "When Non-zero")
   field(OUT,  "$(P)$(R)ARConnectCamera.PROC PP")
}

record(mbbi, "$(P)$(R)ARConvertPixelFormat_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_CONVERT_PIXEL_FORMAT")
  field(ZRST, "Mono16Low")
  field(ZRVL, "0")
  field(ONST, "Mono16High")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}

## When unpacking Mono12Packed or Mono12p selects whether 16-bit output is 
## left shifted by 4 bits (Mono16High) or not (Mono16Low)
record(mbbo, "$(P)$(R)ARConvertPixelFormat") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_CONVERT_PIXEL_FORMAT")
  field(ZRST, "Mono16Low")
  field(ZRVL, "0")
  field(ONST, "Mono16High")
  field(ONVL, "1")
  field(PINI, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}

record(mbbi, "$(P)$(R)ARShiftDir_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_SHIFT_DIR")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Left")
  field(ONVL, "1")
  field(TWST, "Right")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}

## Select no shift, left shift, or right shift when reading data 
record(mbbo, "$(P)$(R)ARShiftDir") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_SHIFT_DIR")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Left")
  field(ONVL, "1")
  field(TWST, "Right")
  field(TWVL, "2")
  field(PINI, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}

record(mbbi, "$(P)$(R)ARShiftBits_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_SHIFT_BITS")
  field(ZRST, "1")
  field(ZRVL, "1")
  field(ONST, "2")
  field(ONVL, "2")
  field(TWST, "3")
  field(TWVL, "3")
  field(THST, "4")
  field(THVL, "4")
  field(FRST, "5")
  field(FRVL, "5")
  field(FVST, "6")
  field(FVVL, "6")
  field(SXST, "7")
  field(SXVL, "7")
  field(SVST, "8")
  field(SVVL, "8")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}

## Selects how many bits to shift left or right when reading data 
record(mbbo, "$(P)$(R)ARShiftBits") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_SHIFT_BITS")
  field(ZRST, "1")
  field(ZRVL, "1")
  field(ONST, "2")
  field(ONVL, "2")
  field(TWST, "3")
  field(TWVL, "3")
  field(THST, "4")
  field(THVL, "4")
  field(FRST, "5")
  field(FRVL, "5")
  field(FVST, "6")
  field(FVVL, "6")
  field(SXST, "7")
  field(SXVL, "7")
  field(SVST, "8")
  field(SVVL, "8")
  field(PINI, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}
